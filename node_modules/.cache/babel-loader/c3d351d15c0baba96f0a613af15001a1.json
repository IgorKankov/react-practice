{"ast":null,"code":"import _toConsumableArray from \"/home/igorkankov/own-projects/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { ADD_TASK, REMOVE_TASK, COMPLETE_TASK } from '../../../constants';\nimport { load } from \"redux-localstorage-simple\"; // const TASKS = [\n//   {\n//     id: 1,\n//     text: 'Learn ReactJS',\n//     isCompleted: true,\n//   },\n//   {\n//     id: 2,\n//     text: 'Learn Redux',\n//     isCompleted: false,\n//   },\n//   {\n//     id: 3,\n//     text: 'Learn React Router',\n//     isCompleted: false,\n//   }\n// ];\n\nvar TASKS = load({\n  namespace: 'todo-list'\n});\n\nif (!TASKS || !TASKS.tasks || !TASKS.tasks.length) {\n  TASKS = {\n    tasks: []\n  };\n}\n\nvar tasks = function tasks() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : TASKS.tasks;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      id = _ref.id,\n      text = _ref.text,\n      isCompleted = _ref.isCompleted,\n      type = _ref.type;\n\n  switch (type) {\n    case ADD_TASK:\n      return [].concat(_toConsumableArray(state), [{\n        id: id,\n        text: text,\n        isCompleted: isCompleted\n      }]);\n\n    case REMOVE_TASK:\n      return _toConsumableArray(state).filter(function (task) {\n        return task.id !== id;\n      });\n\n    case COMPLETE_TASK:\n      return _toConsumableArray(state).map(function (task) {\n        if (task.id === id) {\n          task.isCompleted = !task.isCompleted;\n        }\n\n        return task;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default tasks;","map":{"version":3,"sources":["/home/igorkankov/own-projects/react-practice/src/components/redux-lesson/reducer/tasks.js"],"names":["ADD_TASK","REMOVE_TASK","COMPLETE_TASK","load","TASKS","namespace","tasks","length","state","id","text","isCompleted","type","filter","task","map"],"mappings":";AAAA,SAAQA,QAAR,EAAkBC,WAAlB,EAA+BC,aAA/B,QAAmD,oBAAnD;AACA,SAAQC,IAAR,QAAmB,2BAAnB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAGD,IAAI,CAAC;AAACE,EAAAA,SAAS,EAAE;AAAZ,CAAD,CAAhB;;AAEA,IAAI,CAACD,KAAD,IAAU,CAACA,KAAK,CAACE,KAAjB,IAA0B,CAACF,KAAK,CAACE,KAAN,CAAYC,MAA3C,EAAkD;AAChDH,EAAAA,KAAK,GAAG;AACNE,IAAAA,KAAK,EAAE;AADD,GAAR;AAGD;;AACD,IAAMA,KAAK,GAAG,SAARA,KAAQ,GAAwD;AAAA,MAAvDE,KAAuD,uEAA/CJ,KAAK,CAACE,KAAyC;;AAAA;AAAA,MAAjCG,EAAiC,QAAjCA,EAAiC;AAAA,MAA7BC,IAA6B,QAA7BA,IAA6B;AAAA,MAAvBC,WAAuB,QAAvBA,WAAuB;AAAA,MAAVC,IAAU,QAAVA,IAAU;;AACpE,UAAQA,IAAR;AACE,SAAKZ,QAAL;AACE,0CACKQ,KADL,IACY;AACRC,QAAAA,EAAE,EAAFA,EADQ;AAERC,QAAAA,IAAI,EAAJA,IAFQ;AAGRC,QAAAA,WAAW,EAAXA;AAHQ,OADZ;;AAOF,SAAKV,WAAL;AACE,aAAO,mBAAIO,KAAJ,EAAWK,MAAX,CAAkB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACL,EAAL,KAAYA,EAAhB;AAAA,OAAtB,CAAP;;AACF,SAAKP,aAAL;AACE,aAAO,mBAAIM,KAAJ,EAAWO,GAAX,CAAe,UAAAD,IAAI,EAAI;AAC5B,YAAGA,IAAI,CAACL,EAAL,KAAYA,EAAf,EAAkB;AAChBK,UAAAA,IAAI,CAACH,WAAL,GAAmB,CAACG,IAAI,CAACH,WAAzB;AACD;;AACD,eAAOG,IAAP;AACD,OALM,CAAP;;AAMF;AACE,aAAON,KAAP;AAnBJ;AAqBD,CAtBD;;AAwBA,eAAeF,KAAf","sourcesContent":["import {ADD_TASK, REMOVE_TASK, COMPLETE_TASK} from '../../../constants';\nimport {load} from \"redux-localstorage-simple\";\n\n// const TASKS = [\n//   {\n//     id: 1,\n//     text: 'Learn ReactJS',\n//     isCompleted: true,\n//   },\n//   {\n//     id: 2,\n//     text: 'Learn Redux',\n//     isCompleted: false,\n//   },\n//   {\n//     id: 3,\n//     text: 'Learn React Router',\n//     isCompleted: false,\n//   }\n// ];\nlet TASKS = load({namespace: 'todo-list'});\n\nif (!TASKS || !TASKS.tasks || !TASKS.tasks.length){\n  TASKS = {\n    tasks: [],\n  }\n}\nconst tasks = (state = TASKS.tasks, {id, text, isCompleted, type}) => {\n  switch (type) {\n    case ADD_TASK :\n      return [\n        ...state, {\n          id,\n          text,\n          isCompleted,\n        }\n      ];\n    case REMOVE_TASK :\n      return [...state].filter(task => task.id !== id);\n    case COMPLETE_TASK :\n      return [...state].map(task => {\n        if(task.id === id){\n          task.isCompleted = !task.isCompleted\n        }\n        return task\n      });\n    default:\n      return state;\n  }\n}\n\nexport default tasks;"]},"metadata":{},"sourceType":"module"}