{"ast":null,"code":"import _classCallCheck from \"/home/igorkankov/own-projects/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/igorkankov/own-projects/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/igorkankov/own-projects/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/igorkankov/own-projects/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/igorkankov/own-projects/react-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/igorkankov/own-projects/react-practice/src/components/redux-lesson/containers/todo/todo.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addTask, removeTask, completeTask, changeFilter } from '../../action/action-creator';\nimport ToDoInput from '../../components/todo-input/todo-input';\nimport ToDoList from '../../components/todo-list/todo-list';\nimport Footer from '../../components/footer/footer';\nimport './todo.scss';\n\nvar ToDo = /*#__PURE__*/function (_Component) {\n  _inherits(ToDo, _Component);\n\n  function ToDo() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ToDo);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToDo)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      taskText: ''\n    };\n\n    _this.handleInputChange = function (_ref) {\n      var value = _ref.target.value;\n\n      _this.setState({\n        taskText: value\n      });\n    };\n\n    _this.addTask = function (_ref2) {\n      var key = _ref2.key;\n      var taskText = _this.state.taskText;\n\n      if (taskText.length > 3 && key === 'Enter') {\n        var _addTask = _this.props.addTask;\n\n        _addTask(new Date().getTime(), taskText, false);\n\n        _this.setState({\n          taskText: ''\n        });\n      }\n    };\n\n    _this.filterTasks = function (tasks, activeFilter) {\n      switch (activeFilter) {\n        case 'completed':\n          return tasks.filter(function (task) {\n            return task.isCompleted;\n          });\n          break;\n\n        case 'active':\n          return tasks.filter(function (task) {\n            return !task.isCompleted;\n          });\n          break;\n\n        default:\n          return tasks;\n      }\n    };\n\n    _this.getActiveTasksCounter = function (tasks) {\n      return tasks.filter(function (task) {\n        return !task.isCompleted;\n      }).length;\n    };\n\n    return _this;\n  }\n\n  _createClass(ToDo, [{\n    key: \"render\",\n    value: function render() {\n      var taskText = this.state.taskText;\n      var _this$props = this.props,\n          tasks = _this$props.tasks,\n          removeTask = _this$props.removeTask,\n          completeTask = _this$props.completeTask,\n          filters = _this$props.filters,\n          changeFilter = _this$props.changeFilter;\n      var isTasksExist = tasks && tasks.length > 0;\n      var filteredTasks = this.filterTasks(tasks, filters);\n      var taskCounter = this.getActiveTasksCounter(tasks);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"todo-wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ToDoInput, {\n        onKeyPress: this.addTask,\n        onChange: this.handleInputChange,\n        value: taskText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }), isTasksExist && /*#__PURE__*/React.createElement(ToDoList, {\n        tasksList: filteredTasks,\n        removeTask: removeTask,\n        completeTask: completeTask,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 26\n        }\n      }), isTasksExist && /*#__PURE__*/React.createElement(Footer, {\n        amount: taskCounter,\n        activeFilter: filters,\n        changeFilter: changeFilter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 26\n        }\n      }));\n    }\n  }]);\n\n  return ToDo;\n}(Component);\n\nexport default connect(function (_ref3) {\n  var tasks = _ref3.tasks,\n      filters = _ref3.filters;\n  return {\n    tasks: tasks,\n    filters: filters\n  };\n}, {\n  addTask: addTask,\n  removeTask: removeTask,\n  completeTask: completeTask,\n  changeFilter: changeFilter\n})(ToDo);","map":{"version":3,"sources":["/home/igorkankov/own-projects/react-practice/src/components/redux-lesson/containers/todo/todo.js"],"names":["React","Component","connect","addTask","removeTask","completeTask","changeFilter","ToDoInput","ToDoList","Footer","ToDo","state","taskText","handleInputChange","value","target","setState","key","length","props","Date","getTime","filterTasks","tasks","activeFilter","filter","task","isCompleted","getActiveTasksCounter","filters","isTasksExist","filteredTasks","taskCounter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { addTask, removeTask, completeTask, changeFilter } from '../../action/action-creator';\n\nimport ToDoInput from '../../components/todo-input/todo-input';\nimport ToDoList from '../../components/todo-list/todo-list';\nimport Footer from '../../components/footer/footer';\n\nimport './todo.scss';\n\nclass ToDo extends Component {\n\n  state = {\n    taskText: ''\n  };\n\n  handleInputChange = ({ target: { value } }) => {\n    this.setState({\n      taskText: value,\n    })\n  };\n\n  addTask = ({ key }) => {\n    const { taskText } = this.state;\n\n    if (taskText.length > 3 && key === 'Enter') {\n      const { addTask } = this.props;\n\n      addTask((new Date()).getTime(), taskText, false);\n\n      this.setState({\n        taskText: '',\n      })\n\n    }\n\n  };\n\n  filterTasks = (tasks, activeFilter) => {\n    switch (activeFilter) {\n      case 'completed':\n        return tasks.filter(task => task.isCompleted);\n        break;\n      case 'active':\n        return tasks.filter(task => !task.isCompleted);\n        break;\n      default:\n        return tasks;\n    }\n  };\n\n  getActiveTasksCounter = tasks => tasks.filter(task => !task.isCompleted).length;\n\n  render() {\n    const {  taskText } = this.state;\n    const { tasks, removeTask, completeTask, filters, changeFilter } = this.props;\n    const isTasksExist = tasks && tasks.length > 0;\n    const filteredTasks = this.filterTasks(tasks, filters);\n    const taskCounter = this.getActiveTasksCounter(tasks);\n\n    return (\n      <div className=\"todo-wrapper\">\n        <ToDoInput onKeyPress={this.addTask} onChange={this.handleInputChange} value={taskText} />\n        {isTasksExist && <ToDoList tasksList={filteredTasks} removeTask={removeTask} completeTask={completeTask}/>}\n        {isTasksExist && <Footer amount={taskCounter} activeFilter={filters} changeFilter={changeFilter}/>}\n      </div>\n    );\n  }\n}\n\nexport default connect(({tasks, filters}) => ({\n  tasks,\n  filters\n}), { addTask, removeTask, completeTask, changeFilter })(ToDo);"]},"metadata":{},"sourceType":"module"}